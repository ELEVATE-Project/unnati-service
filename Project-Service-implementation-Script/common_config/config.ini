[dev]
# Host URL for the elevate user service
elevateuserhost = https://dev.elevate-apis.shikshalokam.org/

# Host URL for the elevate project service
elevateprojecthost = https://dev.elevate-apis.shikshalokam.org/project/v1/

# Host URL for the elevate entity service
elevateentityhost = https://dev.elevate-apis.shikshalokam.org/

# JSON body for Keycloak API login
keyclockapibody = '{"email": "pavan@abc.com","password": "Pavan@Pavan001"}'

# Email for login credentials
email = pavan@abc.com

# Password for login credentials
password = Pavan@Pavan001

# Internal access token used for internal API calls
internal-access-token = Fqn0m0HQ0gXydRtBCg5l

# Endpoint for user login API
userlogin = profile/read

# Authorization token for API requests (to be added)
authorization = Bearer  # ADD_YOUR_TOKEN_HERE

# Authorization token specifically for host API requests (to be added)
authorizationforhost = Bearer # ADD_YOUR_TOKEN_HERE

# Application name, typically used in headers or logs
appname = diksha

# Channel ID for identifying the request source
x-channel-id = 0125747659358699520

# Content type for Keycloak API requests
keyclockapicontent-type = application/x-www-form-urlencoded

# Default content type for API requests
content-type = application/json

# Endpoint for fetching user information
userinfoapiurl = project/v1/profile/read

# Endpoint for searching locations in the entity management service
searchforlocation = entity-management/v1/entities/find

# Endpoint for fetching program information
fetchprograminfoapiurl = programs/list?page=1&limit=5&search=

# Endpoint for fetching solution details
fetchsolutiondetails = solutions/list?page=1&limit=100&search=&type=observation&subType

# Endpoint for updating a solution
solutionupdateapi = solutions/update/

# Endpoint for uploading project templates in bulk
projectuploadapi = project/templates/bulkCreate

# Endpoint for uploading project template tasks in bulk
taskuploadapi = project/templateTasks/bulkCreate/

# Endpoint for creating a project solution
projectsolutioncreationapi = solutions/create

# Endpoint for mapping a solution to a project
mapsolutiontoproject = project/templates/importProjectTemplate/

# Endpoint for fetching solution details
fetchsolutiondoc = solutions/getDetails/

# Endpoint for creating a program
programcreationurl = programs/create

# Endpoint for fetching a link related to a solution
fetchlink = solutions/fetchLink/

# Endpoint for reading course details
readcourseurl = api/content/v1/read/

# Endpoint for fetching organization details
fetchorgdetails = api/org/v1/search

# Configuration for different logo-signature combinations (likely used in templates)
onelogo-onesignature = 1L1S
onelogo-twosignature = 1L2S
twologo-onesignature = 2L1S
twologo-twosignature = 2L2S


[local]
# Host URL for the elevate user service
elevateuserhost = http://localhost:3001/

# Host URL for the elevate project service
elevateprojecthost = http://localhost:5000/

# Host URL for the elevate entity service
elevateentityhost = http://localhost:5001/

# JSON body for Keycloak API login
keyclockapibody = '{"email": "rahul@yahoo.com","password": "password"}'

# Email for login credentials
email = rahul@yahoo.com

# Password for login credentials
password = password

# Internal access token used for internal API calls
internal-access-token = internal_access_token

# Endpoint for user login API
userlogin = profile/read

# Authorization token for API requests (to be added)
authorization = Bearer  # ADD_YOUR_TOKEN_HERE

# Authorization token specifically for host API requests (to be added)
authorizationforhost = Bearer # ADD_YOUR_TOKEN_HERE

# Application name, typically used in headers or logs
appname = diksha

# Channel ID for identifying the request source
x-channel-id = 0125747659358699520

# Content type for Keycloak API requests
keyclockapicontent-type = application/x-www-form-urlencoded

# Default content type for API requests
content-type = application/json

# Endpoint for fetching user information
userinfoapiurl = project/v1/profile/read

# Endpoint for searching locations in the entity management service
searchforlocation = project/v1/programs/create

# Endpoint for fetching program information
fetchprograminfoapiurl = project/v1/programs/list?page=1&limit=5&search=

# Endpoint for fetching solution details
fetchsolutiondetails = project/v1/solutions/list?page=1&limit=100&search=&type=observation&subType

# Endpoint for updating a solution
solutionupdateapi = project/v1/solutions/update/

# Endpoint for uploading project templates in bulk
projectuploadapi = project/v1/project/templates/bulkCreate

# Endpoint for uploading project template tasks in bulk
taskuploadapi = project/v1/project/templateTasks/bulkCreate/

# Endpoint for creating a project solution
projectsolutioncreationapi = project/v1/solutions/create

# Endpoint for mapping a solution to a project
mapsolutiontoproject = project/v1/project/templates/importProjectTemplate/

# Endpoint for fetching solution details
fetchsolutiondoc = project/v1/solutions/getDetails/

# Endpoint for creating a program
programcreationurl = project/v1/programs/create

# Endpoint for fetching a link related to a solution
fetchlink = project/v1/solutions/fetchLink/

# Endpoint for reading course details
readcourseurl = api/content/v1/read/

# Endpoint for fetching organization details
fetchorgdetails = api/org/v1/search

# Configuration for different logo-signature combinations (likely used in templates)
onelogo-onesignature = 1L1S
onelogo-twosignature = 1L2S
twologo-onesignature = 2L1S
twologo-twosignature = 2L2S
onelogo-onesignature = 1L1S
onelogo-twosignature = 1L2S
twologo-onesignature = 2L1S
twologo-twosignature = 2L2S